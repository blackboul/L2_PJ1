#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct coord{
    int x;
    int y;
}coord;

int gain(int argent, clock_t temps);
void winner(int gagnant, clock_t temps, int argent);
void creation_plateau(int ***, int, int);
void affichage_temp(int **, int, int);
void init_joueurs(int ***, coord *, coord * ,int , int);
int deplacement(int ***tab, coord *j1, coord *j2, int largeur, int hauteur); ///RENVOIE 1 OU 0 SI WIN/LOSE
int verif_mur(coord *j1, int largeur, int hauteur, int direct);
char ia_shit(int ***tab, coord *j2, int largeur,int hauteur);
int deplacer(int ***tab, coord *joueur, int largeur, int hauteur, int *tour, int *last);

int main(){
    int argent=100;
    srand(time(NULL));
    clock_t temps;


    int **tab, largeur = 100, hauteur = 60, gagnant = 0;
    coord j1, j2;

    printf("ZQSD POUR SE DEPLACER");
    creation_plateau(&tab, largeur ,hauteur);///LARGEUR / HAUTEUR
    init_joueurs(&tab, &j1, &j2, largeur, hauteur);
    gagnant = deplacement(&tab, &j1, &j2, largeur, hauteur);
    temps=clock();
    winner(gagnant, temps, argent);
    return 0;
}
int gain(int argent, clock_t temps)
{

    if ((double)temps/CLOCKS_PER_SEC<30.000)
    {
        return argent+100;
    }
    else if ((double)temps/CLOCKS_PER_SEC<50.000)
    {

        return argent+60;
    }
    else
    {
        return argent+40;
    }
}
void winner(int gagnant, clock_t temps, int argent)
{
    if (gagnant==1)
    {

        printf("Joueur gagne\n Tu as gagnÃ© en %f secondes.",(double)temps/CLOCKS_PER_SEC);
        argent=gain(argent, temps);
        printf("Tu as %d euros", argent);
    }
    if (gagnant!=1)
    {
        printf("Joueur perd");
        printf("\n Tu as perdu en %f secondes.",(double)temps/CLOCKS_PER_SEC);
    }

}
void creation_plateau(int ***tab, int largeur, int hauteur){
    int i, j;

    (*tab) = malloc(hauteur * sizeof(int *));
    for(i = 0; i < hauteur; i++) (*tab)[i] = malloc(largeur * sizeof(int));

    for(i = 0; i < hauteur; i++){
        for(j = 0; j < largeur; j++){
            (*tab)[i][j] = 0;
        }
    }


}

void affichage_temp(int **tab, int largeur, int hauteur){
    int i, j;

    for(i = 0; i < hauteur; i++){
        for(j = 0; j < largeur; j++){
            if(i == 0 || j == 0 || j == largeur-1 || i == hauteur-1) printf("N");
            else if((tab)[i][j] == 0)printf(" ");
            else printf("X");
        }
        printf("\n");
    }
}



void init_joueurs(int ***tab, coord *j1, coord *j2, int largeur, int hauteur){

    j1->x = largeur/4;
    j1->y = hauteur/2;

    j2->x = (3*largeur)/4;
    j2->y = hauteur/2;

    (*tab)[j1->y][j1->x] = 1;
    (*tab)[j2->y][j2->x] = 1;
}

int deplacement(int ***tab, coord *j1, coord *j2, int largeur, int hauteur){

    int direct, last[2] = {0}, last2 = 0, tour  = 0, k, win = -1;

    do{
        if(tour == 0) win = deplacer(tab, j1, largeur, hauteur, &tour, last);
        else if(tour == 1) win = deplacer(tab, j2, largeur, hauteur, &tour, last);
        if(win != -1) return win;
    }while(j1->x > -1 && j1->y > -1  && j1->x != largeur  && j1->y != hauteur && j2->x > -1 && j2->y > -1  && j2->x != largeur  && j2->y != hauteur);
}


int deplacer(int ***tab, coord *j, int largeur, int hauteur, int *tour, int *last){
    int direct, k = 0;

    fflush(stdin);
    if((*tour) == 0) direct = getch();
    else if((*tour) == 1) direct = ia_shit(tab, j, largeur, hauteur);

    if(direct == 'z' && last[(*tour)] == 's') k = 1;
    else if(direct == 'q' && last[(*tour)] == 'd') k = 1;
    else if(direct == 'd' && last[(*tour)] == 'q') k = 1;
    else if(direct == 's' && last[(*tour)] == 'z') k = 1;



    if(k == 0){
        if((direct == 'z') && (verif_mur(j, largeur, hauteur, 1) != 0)) j->y += -1;
        else if((direct == 'q') && (verif_mur(j, largeur, hauteur, 2) != 0)) j->x += -1;
        else if(direct == 's' && (verif_mur(j, largeur, hauteur, 3) != 0)) j->y += 1;
        else if(direct == 'd' && (verif_mur(j, largeur, hauteur, 4) != 0)) j->x += 1;

        if((*tab)[j->y][j->x] == 0) (*tab)[j->y][j->x] = 1;

        else return (*tour);
    }

    else (*tour)--;
    if(k == 0) (last[(*tour)]) = direct;

    system("cls");
    affichage_temp(*tab, largeur, hauteur);
    (*tour)++;
    (*tour) = (*tour)%2;

    return -1;
}



int verif_mur(coord *j1, int largeur, int hauteur, int direct){
    if(direct == 1 &&((j1->y)-1) == -1) return 0;
    else if(direct == 2 && ((j1->x) -1) == -1) return 0;
    else if(direct == 3 && ((j1->y) + 1) == hauteur) return 0;
    else if(direct == 4 && ((j1->x) +1 ) == largeur) return 0;

    return 1;
}


char ia_shit(int ***tab, coord *j2, int largeur,int hauteur){

    int choix, i = 0;

    choix = (rand()%4)+1;


    do{

        if(choix == 1 &&((*tab)[(j2->y)-1][j2->x] == 0) && (verif_mur(j2, largeur, hauteur, 1) != 0)) return 'z' ;
        else if(choix == 2 &&((*tab)[(j2->y)][(j2->x)-1] == 0) && (verif_mur(j2, largeur, hauteur, 2) != 0)) return 'q';
        else if(choix == 3 &&((*tab)[(j2->y)+1][j2->x] == 0) && (verif_mur(j2, largeur, hauteur, 3) != 0)) return 's';
        else if(choix == 4 &&((*tab)[j2->y][(j2->x)+1] == 0) && (verif_mur(j2, largeur, hauteur, 4) != 0)) return 'd';
        choix = 1+(choix%4);
        i++;
    }while(i < 4);

    if(choix == 1) return 'z';
    else if(choix == 2) return 'q';
    else if(choix == 3) return 's';
    else if(choix == 4) return 'd';


}

int verif_dir(int **tab, coord *j1, int largeur, int hauteur, int direct){
    int i=0;
    if(direct == 1 && (tab[j1->x][(j1->y)-1] == 1)) i++;
    else if(direct == 2 && (tab[(j1->x)-1][j1->y] == 1)) i++;
    else if(direct == 3 && (tab[j1->x][(j1->y)+1] == 1)) i++;
    else if(direct == 4 && (tab[(j1->x)+1][j1->y] == 1)) i++;
    return i;
}
